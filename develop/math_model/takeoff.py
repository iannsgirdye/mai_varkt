import numpy as np  # NumPy     | Проведение математических расчётов
import json         # JSON      | Работа с JSON файлами   
import itertools    # Itertools | Подключение необходимого итератора


def log(t, h, v_x, v_y, v):
    with open("math_model/takeoff_logs.json", "r", encoding="UTF-8") as math_file_logs:
        logs = json.load(math_file_logs)

    with open("math_model/takeoff_logs.json", "w", encoding="UTF-8") as math_file_logs:
        logs[str(t)] = {
            "height": h,
            "vertical_speed": v_y,
            "horizontal_speed": v_x,
            "speed": v
        }
        json.dump(logs, math_file_logs, ensure_ascii=True, indent=4)  


# Постоянные величины
G = 6.67430e-11          # Гравитационная постоянная          | м³/(кг·с²)
M_Kerbin = 5.2915793e22  # Масса Кербина                      | кг
R_Kerbin = 600_000       # Радиус Кербина                     | м
M = 0.029                # Молярная масса воздуха             | кг/моль
R = 8.314                # Универсальная газовая постоянная   | Дж/(моль·К)
T = 288.15               # Абсолютная температура             | К
rho0 = 1.225             # Плотность воздуха на уровне моря   | кг/м³
d = 0.5                  # Коэффициент лобового сопротивления |
A = 10                   # Площадь поперечного сечения ракеты | м²
g = 9.81                 # Ускорение свободного падения       | м/с²
h_max = 70000            # Необходимая высота                 | м

# Начальные величины ракеты
TWR = 1.09              # Отношение начальной тяги к весу | 
m0 = 32_883             # Начальная масса ракеты          | кг
k = 20                  # Скорость истечения продуктов    | кг/с
Ft0 = TWR * m0 * g      # Начальная тяга                  | Н
alpha = np.radians(90)  # Угол тяги                       | радиан (90° - вертикальный старт)
with open("simulation/takeoff_logs.json", "r", encoding="UTF-8") as ksp_file_logs:
    ksp_logs = json.load(ksp_file_logs)
    t_max = len(ksp_logs)   # Время cимуляции = время полёта  | с

# Вычисляемые значения ракеты
h = 0     # Высота                            | м
v_x = 0   # Горизонтальная скорость           | м/с
v_y = 0   # Вертикальная скорость             | м/с
v = 0     # Итоговая скорость                 | м/с
v0_x = 0  # Начальная горизонтальная скорость | м/с
v0_y = 0  # Начальная вертикальная скорость   | м/с
a_x = 0   # Горизонтальное ускорение          | м/с²
a_y = 0   # Вертикальное ускорение            | м/с²
a = 0     # Итоговое ускорение                | м/с²


# Цикл полёта (вычисление данных)
for t in itertools.count(0, 0.01):
    m = m0 - k * t                                # Масса ракеты
    rho = rho0 * np.exp(-g * M * h / (R * T))     # Плотность воздуха
    
    Fd = rho * v**2 * d * A                      # Аэродинамическое сопротивление
    Ft = max(Ft0 - k * t, 0)                      # Сила тяги (уменьшается со временем)
    Fp = G * (M_Kerbin * m) / (R_Kerbin + h)**2   # Сила притяжения

    a_x = (Ft - Fd) * np.cos(alpha) / m           # Горизонтальное ускорение
    a_y = ((Ft - Fd) * np.sin(alpha) - Fp) / m    # Вертикальное ускорение
    a = np.sqrt(a_x**2 + a_y**2)                  # Итоговое ускорение
    
    v_x = v0_x + a_x * t                          # Горизонтальная скорость      
    v_y = v0_y + a_y * t                          # Вертикальная скорость   
    v = np.sqrt(v_x**2 + v_y**2)                  # Итоговая скорость 
    
    v0_x = v_x                                    # Будущая начальная горизонтальная скорость
    v0_y = v_y                                    # Будущая начальная вертикальная скорость
      
    h = v * t                                     # Высота
    
    if h >= 250:
        alpha = np.radians(90 * (1 - h / h_max))  # Угол наклона ракеты

    log(t, h, v_x, v_y, v)                        # Сохранение данных

    if t >= t_max or h >= h_max:                  # Остановка цикла при завершении наборы высоты
        break